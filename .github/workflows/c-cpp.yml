name: C/C++ CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
    - name: Caching CParse
      uses: actions/cache@v3
      id: cparse-cache
      with:
        path: |
          cparse/core-shunting-yard.o
          cparse/builtin-features.o
        key: cparse-${{ runner.os }}-${{ hashFiles('cparse/') }}
    - name: Set up GCC and GTK3
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        path-type: inherit
        install: mingw-w64-x86_64-gtk3 mingw-w64-x86_64-toolchain base-devel
    - name: Set up GTK3 (Linux)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        sudo apt install libgtk-3-dev -y
    - name: Get number of CPU cores
      uses: SimenB/github-actions-cpu-cores@v1
      id: cpu-cores
    - name: Making CParse
      shell: bash
      if: steps.cparse-cache.outputs.cache-hit != 'true'
      run: make release -C cparse -j${{ steps.cpu-cores.outputs.count }}
    - name: Building (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        cmake -G "Unix Makefiles" . -B build
        cd build && make
        ldd bin/main.exe | grep '\/mingw.*\.dll' -o | xargs -I{} cp "{}" ./bin
        tar -cvf ../build.tar bin/
    - name: Building (Linux)
      if: runner.os != 'Windows'
      shell: bash
      run: |
        cmake . -B build
        cd build && make -j${{ steps.cpu-cores.outputs.count }}
        tar -cvf ../build.tar *
    - name: Archive Windows build
      if: runner.os == 'Windows'
      uses: actions/upload-artifact@v3
      with:
        name: Windows build
        path: build.tar
    - name: Archive Linux build
      if: runner.os != 'Windows'
      uses: actions/upload-artifact@v3
      with:
        name: Linux build
        path: build.tar
